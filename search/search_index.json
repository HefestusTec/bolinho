{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Documentation of the FullStack solution bolinho.</p> <p>This documentation automatically generates a PDF file from it's content. You can download it here.</p>"},{"location":"#you-can-see-the-react-front-end-here","title":"You can see the React Front-end HERE!","text":"<p>This is a static version of the app, without access to the server, therefore most features won't work.</p> <p>Info</p> <p>Remember that you need to build the app for it to show on the static page, so run <code>npm run buildWeb</code> or something similar to build it.</p> <p>Use the Tabs above to navigate through the documentation.</p>"},{"location":"#known-bugs","title":"Known bugs","text":"<p>The full list of known bugs can be seen at https://github.com/HefestusTec/bolinho/issues?q=is%3Aopen+is%3Aissue+label%3Abug</p>"},{"location":"#running","title":"Running","text":"<p>As for running the program we have a few options:</p> <ul> <li> <p>Run only the frontend <code>npm run startWeb</code></p> </li> <li> <p>Run only the backend <code>npm run startEel</code></p> </li> <li> <p>Serve the full application <code>npm run serve</code></p> <p>This command will start the eel as headless and start the web serve, it doesn't need to build the front end before executing. Less performant.</p> <p>To update the backend ability to call front end functions you should first build the front.</p> </li> <li> <p>Run the full application <code>npm run start</code></p> <p>With this command it will first build the react front end, then run the python script.</p> </li> <li> <p>Build the react frontend <code>npm run buildWeb</code></p> </li> <li> <p>Build binaries. <code>npm run buildBin</code></p> <ul> <li>You can build the \"binaries\", more like a python environment wrapper, it uses PyInstaller to generate the bins.</li> <li>The output path is <code>bolinho/src/dist/</code></li> </ul> </li> </ul> <p>Did you like this documentation? You can check out the repo ZRafaF/ReadTheDocksBase for more info .</p>"},{"location":"setup/","title":"Setup","text":"<p>This page will define the step-by-step to build this project.</p> <p>This project assumes you have the latest version of Python, PIP and GIT,</p> <p>This project was developed using python version <code>Python 3.10.x</code></p>"},{"location":"setup/#clone-the-repo","title":"Clone the repo","text":"Bash<pre><code>git clone https://github.com/HefestusTec/bolinho\n\ncd bolinho\n</code></pre>"},{"location":"setup/#creating-a-virtual-environment","title":"Creating a virtual environment","text":"<p>The following step isn't mandatory but recommended.</p> Bash<pre><code>python -m pip install --user virtualenv\n\npython -m venv venv\n</code></pre> <p>The a directory <code>venv</code> should be created in the root folder.</p> <p>How to activate:</p> <p>Windows activation</p> <pre><code>venv/Scripts/activate\n</code></pre> <p>or</p> <p>Linux activation</p> <pre><code>source venv/bin/activate\n</code></pre>"},{"location":"setup/#installing-dependencies","title":"Installing dependencies","text":"Bash<pre><code>npm run installDep\n</code></pre>"},{"location":"setup/#documentation","title":"Documentation","text":"<p>The following step is only required for those that want to edit the documentation.</p>"},{"location":"setup/#installing-dependencies_1","title":"Installing dependencies","text":"Bash<pre><code>pip install -r docs/requirements.txt\n</code></pre>"},{"location":"setup/#build","title":"Build","text":"<p>We have two options to create a build:</p> <ul> <li> <p>Serve:</p> <p>This option is used for debugging, it will open the static page in one of the localhost ports.</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>Build:</p> <p>This option creates a build of the documentation and saves it on de directory <code>/site/</code>.</p> <pre><code>mkdocs build\n</code></pre> </li> </ul> <p>Note</p> <p>Be aware of the Environment Variable <code>ENABLE_PDF_EXPORT</code>, it will only generate the PDF if this variable is set to <code>1</code>.</p> <p>You can change the <code>mkdocs.yml</code> file and remove this line if you so choose.</p> <p>For more info about the documentation please checkout ZRafaF/ReadTheDocksBase.</p>"},{"location":"about/","title":"About","text":"<p>This page will present extra info about the project.</p>"},{"location":"about/#licenses","title":"Licenses","text":"<p>This software is licensed and distributed under the GNU General Public License v3.0</p> <pre><code>Copyright (C) 2023 Hefestus\n\nBolinho is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nBolinho is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Bolinho.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre>"},{"location":"about/#included-third-party-projects","title":"Included third-party projects","text":"<ul> <li> <p>Python Eel - see license</p> </li> <li> <p>MkDocs - see license</p> </li> <li> <p>Material for MkDocs - see license</p> </li> <li> <p>MkDocs With PDF - see license</p> </li> <li> <p>MkDocs PDF Export Plugin - see license</p> </li> <li> <p>JSX Lexer - see license</p> </li> <li> <p>Roboto family of fonts - see license</p> </li> <li> <p>React - see license</p> </li> <li> <p>rc-slider - see license</p> </li> <li> <p>Chart JS - see license</p> </li> <li> <p>React Chart JS 2 - see license</p> </li> <li> <p>React Long Press Hook - see license</p> </li> <li> <p>React Colorful - see license</p> </li> <li> <p>React Toastify - see license </p> </li> <li> <p>Use Debounce - see license </p> </li> <li> <p>Use Long Press - see license </p> </li> <li> <p>React Circular Progressbar - see license </p> </li> <li> <p>React Transition Group - see license</p> </li> <li> <p>Reactjs popup - see license</p> </li> </ul> <p>Agradecemos do fundo do cora\u00e7\u00e3o todos os autores dos diferentes projetos utilizados, software livre \u00e9 liberdade, muito obrigado a todos.</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#api","title":"API","text":"<p>In this section you will be able to finde every API call available.</p> <p>These <code>calls</code> are exposed to the front-end via the <code>eel</code> object, giving it access to the data base, systems and hardware. This solutions makes use of the eel library to realize the communication between the front-end and back-end;</p> <p>This API reference will show the methods being called by the front-end in JavaScript, and every call should be made asynchronously.</p>"},{"location":"api/#how-to-create-and-expose-functions-to-the-backend","title":"How to create and expose functions to the backend","text":"JSX<pre><code>function myJsFunction(message){\nconsole.log(`Got this from the back end ${message}`)\n}\n// This line exposes the function to the back end, note the second argument, it is the name that the back end needs to call\nwindow.eel.expose(myJsFunction, \"myJsFunction\");\n</code></pre> Python<pre><code>try:\neel.myJsFunction(\"IT'S WORKING\")\nexcept:\npass\n</code></pre>"},{"location":"api/backend_api/","title":"Backend API","text":""},{"location":"api/backend_api/#backend-api","title":"Backend API","text":"<p>This page gathers all the API calls that can be used by the front end.</p> <p>Front end -&gt; Backend</p>"},{"location":"api/backend_api/#global-configuration","title":"Global configuration","text":"<p>Collection of all functions/API calls available to the front end that handles the global variables. </p>"},{"location":"api/backend_api/#saveconfigparamsconfigparams","title":"saveConfigParams(configParams)","text":"<p>saveConfigParams(configParams)</p> <p>Saves the config parameters to the persistent file</p> React usage example<pre><code>import { saveConfigParams } from \"./api/backend-api\";\nsaveConfigParams(globalConfig);\n</code></pre>"},{"location":"api/backend_api/#loadconfigparams","title":"loadConfigParams()","text":"<p>loadConfigParams()</p> <p>Loads the config parameters from the persistent file</p> React usage example<pre><code>import { loadConfigParams } from \"./api/backend-api\";\nglobalConfig = loadConfigParams();\n</code></pre>"},{"location":"api/backend_api/#data-base","title":"Data base","text":"<p>Collection of all functions/API calls available to the front end that handles the communication with the data base, such as fetching and storing data. </p>"},{"location":"api/backend_api/#getmateriallist","title":"getMaterialList()","text":"<p>getMaterialList()</p> <p>TODO</p> React usage example<pre><code>import { getMaterialList } from \"./api/backend-api\";\nglobalConfig = getMaterialList();\n</code></pre>"},{"location":"api/backend_api/#getmaterialatindex","title":"getMaterialAt(index)","text":"<p>getMaterialAt(index)</p> <p>Returns the material at an <code>index</code> from the database.</p> React usage example<pre><code>import { getMaterialAt } from \"./api/backend-api\";\nconst elem21 = getMaterialAt(21);\n</code></pre>"},{"location":"api/backend_api/#getexperimentatindex","title":"getExperimentAt(index)","text":"<p>getExperimentAt(index)</p> <p>Returns the experiment at an <code>index</code> from the database.</p> React usage example<pre><code>import { getExperimentAt } from \"./api/backend-api\";\nconst elem21 = getExperimentAt(21);\n</code></pre>"},{"location":"api/backend_api/#getdatapointarrayatindex","title":"getDataPointArrayAt(index)","text":"<p>getDataPointArrayAt(index)</p> <p>Returns an array of <code>DataPoint</code> at an <code>index</code> from the database.</p> React usage example<pre><code>import { getDataPointArrayAt } from \"./api/backend-api\";\nimport { DataPointType } from \"types/DataPointTypes\";\nconst dataPointArrya: DataPointType[] = getDataPointArrayAt(21);\n</code></pre>"},{"location":"api/backend_api/#postmaterialjsmaterial","title":"postMaterialJS(material)","text":"<p>postMaterialJS(material)</p> <p>Posts a new material to the Data base</p> React usage example<pre><code>import { postMaterialJS } from \"./api/backend-api\";\npostMaterialJS({\n//...\n})\n</code></pre>"},{"location":"api/backend_api/#patchmaterialbyidjspatchmaterial","title":"patchMaterialByIdJS(patchMaterial)","text":"<p>patchMaterialByIdJS(patchMaterial)</p> <p>Patches an existing material in the Data base</p> React usage example<pre><code>import { patchMaterialByIdJS } from \"./api/backend-api\";\npatchMaterialByIdJS({\nid: 2,\nsupplier_name: \"Meu novo fornecedor\",\nsupplier_contact_info: \"(12) 9 9123-0192\",\nextra_info: \"Hehe muito legal\",\n})\n</code></pre>"},{"location":"api/backend_api/#deletematerialbyidjsid","title":"deleteMaterialByIdJS(id)","text":"<p>deleteMaterialByIdJS(id)</p> <p>Deletes an existing material in the Data base.</p> React usage example<pre><code>import { deleteMaterialByIdJS } from \"./api/backend-api\";\ndeleteMaterialByIdJS(22)\n</code></pre>"},{"location":"api/backend_api/#postexperimentjsexperiment","title":"postExperimentJS(experiment)","text":"<p>postExperimentJS(experiment)</p> <p>Posts a new experiment to the Data base</p> React usage example<pre><code>import { postExperimentJS } from \"./api/backend-api\";\npostExperimentJS({\n// ...\n})\n</code></pre>"},{"location":"api/backend_api/#patchexperimentbyidjspatchexperiment","title":"patchExperimentByIdJS(patchExperiment)","text":"<p>patchExperimentByIdJS(patchExperiment)</p> <p>Patches an existing experiment in the Data base</p> React usage example<pre><code>import { patchExperimentByIdJS } from \"./api/backend-api\";\npatchExperimentByIdJS({\nid: 2,\nname: \"Meu novo nome\",\nextra_info: \"Hehe muito legal\",\n})\n</code></pre>"},{"location":"api/backend_api/#deleteexperimentbyidjsid","title":"deleteExperimentByIdJS(id)","text":"<p>deleteExperimentByIdJS(id)</p> <p>Deletes an existing experiment in the Data base.</p> React usage example<pre><code>import { deleteExperimentByIdJS } from \"./api/backend-api\";\ndeleteExperimentByIdJS(22)\n</code></pre>"},{"location":"api/backend_api/#core","title":"Core","text":""},{"location":"api/backend_api/#checkcanstartexperimentjs","title":"checkCanStartExperimentJS()","text":"<p>checkCanStartExperimentJS()</p> <p>This function calls the <code>check_can_start_experiment(experiment_id)</code> on the backend.</p> <p>The front end will call this function when the user click to start experiment.</p> <p>The backend MUST respond with a 1 if everything is ok or 0 if something is not correct.</p> <p>In case something is wrong the backend also displays an error to the user telling what went wrong</p> React usage example<pre><code>import { checkCanStartExperimentJS } from \"./api/backend-api\";\nonClick(()=&gt;{\ncheckCanStartExperimentJS(2);\n};)\n</code></pre>"},{"location":"api/backend_api/#startexperimentroutinejsexperimentid","title":"startExperimentRoutineJS(experimentId)","text":"<p>startExperimentRoutineJS(experimentId)</p> <p>This function calls the <code>start_experiment_routine(experiment_id)</code> on the backend.</p> <p>The front end will call this function after everything is correct and ready to change pages.</p> <p>Receives an <code>id</code> to an experiment as parameter.</p> <p>The backend MUST send a command to change to the experiment page.</p> <p>Returns 1 if succeeded.</p> React usage example<pre><code>import { startExperimentRoutineJS } from \"./api/backend-api\";\nonClick(()=&gt;{\nstartExperimentRoutineJS(2);\n};)\n</code></pre>"},{"location":"api/backend_api/#endexperimentroutinejs","title":"endExperimentRoutineJS()","text":"<p>endExperimentRoutineJS()</p> <p>This function calls the <code>end_experiment_routine()</code> on the backend.</p> <p>Usually it should be used to handle when the user press a \"end experiment\" button or something similar.</p> React usage example<pre><code>import { getMaterialList } from \"./api/backend-api\";\nonClick(()=&gt;{\nendExperimentRoutineJS();\n};)\n</code></pre>"},{"location":"api/backend_api/#setcustommovementdistancejs","title":"setCustomMovementDistanceJS()","text":"<p>setCustomMovementDistanceJS()</p> <p>Warning</p> <p>DEPRECATED</p> <p>This function calls the <code>set_custom_movement_distance(new_movement_distance)</code> on the backend.</p> <p>Sets the movement distance that the z-axis moves when the user is controlling the machine manually.</p> <p>This distance is set in MILLIMETERS</p> <p>Returns 1 if succeeded.</p> React usage example<pre><code>import { setCustomMovementDistanceJS } from \"./api/backend-api\";\nonClick(()=&gt;{\n// Sets the movement distance to 50 mm\nsetCustomMovementDistanceJS(50);\n};)\n</code></pre>"},{"location":"api/backend_api/#returnzaxisjs","title":"returnZAxisJS()","text":"<p>returnZAxisJS()</p> <p>This function calls the <code>return_z_axis()</code> on the backend.</p> <p>Returns the z-axis to the origin.</p> <p>Returns 1 if succeeded (if the function was acknowledged).</p> React usage example<pre><code>import { returnZAxisJS } from \"./api/backend-api\";\nonClick(()=&gt;{\nreturnZAxisJS();\n};)\n</code></pre>"},{"location":"api/backend_api/#stopzaxisjs","title":"stopZAxisJS()","text":"<p>stopZAxisJS()</p> <p>This function calls the <code>stop_z_axis()</code> on the backend. Stops the z-axis. Returns 1 if succeeded (if the function was acknowledged).</p> React usage example<pre><code>import { stopZAxisJS } from \"./api/backend-api\";\nonClick(()=&gt;{\nstopZAxisJS();\n};)\n</code></pre>"},{"location":"api/backend_api/#movezaxismillimetersjsdistance","title":"moveZAxisMillimetersJS(distance)","text":"<p>moveZAxisMillimetersJS(distance)</p> <p>This function calls the <code>move_z_axis_millimeters(distance)</code> on the backend. Moves the z-axis [distance]mm. This distance is set in MILLIMETERS Returns 1 if succeeded (if the function was acknowledged).</p> React usage example<pre><code>import { moveZAxisMillimetersJS } from \"./api/backend-api\";\nonClick(()=&gt;{\nmoveZAxisMillimetersJS(10);\n};)\n</code></pre>"},{"location":"api/backend_api/#movezaxisrevolutionsjsrevolutions","title":"moveZAxisRevolutionsJS(revolutions)","text":"<p>moveZAxisRevolutionsJS(revolutions)</p> <p>This function calls the <code>move_z_axis_revolutions(revolutions)</code> on the backend. Moves the z-axis [revolutions].</p> <p>This distance is set in revolutions</p> <p>Returns 1 if succeeded (if the function was acknowledged).</p> React usage example<pre><code>import { moveZAxisRevolutionsJS } from \"./api/backend-api\";\nonClick(()=&gt;{\nmoveZAxisRevolutionsJS(0.5);\n};)\n</code></pre>"},{"location":"api/backend_api/#getavailableportslistjs","title":"getAvailablePortsListJS()","text":"<p>getAvailablePortsListJS()</p> <p>This function calls the <code>get_available_ports_list()</code> on the backend. Returns a JSON object containing the available COM ports: JSON<pre><code>{\n\"port\": x,\n\"desc\": y,\n}\n</code></pre></p> React usage example<pre><code>import { getAvailablePortsListJS } from \"./api/backend-api\";\nonClick(()=&gt;{\ngetAvailablePortsListJS().then((availablePorts)=&gt;{\nif(availablePorts) console.log(availablePorts);\n});\n};)\n</code></pre>"},{"location":"api/backend_api/#connecttoportjs","title":"connectToPortJS()","text":"<p>connectToPortJS()</p> <p>This function calls the <code>connect_to_port()</code> on the backend. Connects to a port. The port argument is a string like <code>COM4</code></p> <p>Returns 1 connection was successful</p> React usage example<pre><code>import { connectToPortJS } from \"./api/backend-api\";\nonClick(()=&gt;{\nconnectToPortJS(\"COM3\");\n};)\n</code></pre>"},{"location":"api/backend_api/#disconnectgranuladojs","title":"disconnectGranuladoJS()","text":"<p>!!! quote \"### disconnectGranuladoJS() ()\"     This function calls the <code>disconnect_granulado()</code> on the backend.</p> Text Only<pre><code>Returns 1 connection was successful\n\n``` javaScript title=\"React usage example\"\nimport { disconnectGranuladoJS } from \"./api/backend-api\";\n\nonClick(()=&gt;{\n    disconnectGranuladoJS(\"COM3\");\n};)\n```\n</code></pre>"},{"location":"api/backend_api/#tareloadjs","title":"tareLoadJS()","text":"<p>tareLoadJS()</p> <p>This function calls the <code>tare_load()</code> on the backend. Tares the load cell Returns 1 if succeeded (if the function was acknowledged).</p> React usage example<pre><code>import { tareLoadJS } from \"./api/backend-api\";\nonClick(()=&gt;{\ntareLoadJS();\n};)\n</code></pre>"},{"location":"api/backend_api/#calibrateknownweightjs","title":"calibrateKnownWeightJS()","text":"<p>calibrateKnownWeightJS()</p> <p>This function calls the <code>calibrate_known_weight()</code> on the backend. Calibrates the load cell to the known weight Returns 1 if succeeded (if the function was acknowledged).</p> React usage example<pre><code>import { calibrateKnownWeightJS } from \"./api/backend-api\";\nonClick(()=&gt;{\ncalibrateKnownWeightJS();\n};)\n</code></pre>"},{"location":"api/backend_api/#calibratezaxisjs","title":"calibrateZAxisJS()","text":"<p>calibrateZAxisJS()</p> <p>This function calls the <code>calibrate_z_axis()</code> on the backend. Calibrates z axis of the machine Returns 1 if succeeded (if the function was acknowledged).</p> React usage example<pre><code>import { calibrateZAxisJS } from \"./api/backend-api\";\nonClick(()=&gt;{\ncalibrateZAxisJS();\n};)\n</code></pre>"},{"location":"api/backend_api/#getgranuladoisconnectedjs","title":"getGranuladoIsConnectedJS()","text":"<p>getGranuladoIsConnectedJS()</p> <p>This function calls the <code>get_granulado_is_connected()</code> on the backend. Checks if granulado is connected</p> <p>Returns a <code>boolean</code></p> React usage example<pre><code>import { getGranuladoIsConnectedJS } from \"./api/backend-api\";\nonClick(()=&gt;{\nalert(getGranuladoIsConnectedJS());\n};)\n</code></pre>"},{"location":"api/dataTypes/","title":"Data Types","text":""},{"location":"api/dataTypes/#data-types","title":"Data types","text":"<p>All different data types will be shown in this page</p> <p>ATTENTION</p> <p>To see a more up to date version of the different data types pleas see <code>src/bolinho_api/classes.py</code>!</p>"},{"location":"api/dataTypes/#datapoint","title":"DataPoint","text":"Python<pre><code>class DataPoint:\ndef __init__(self, x=0, y=0):\nself.x = x\nself.y = y\n</code></pre> <ul> <li><code>x</code>: Position at the mesure moment<ul> <li>type: <code>float</code></li> <li>Unity: <code>mm</code></li> </ul> </li> <li><code>y</code>: Force at the mesure moment<ul> <li>Type: <code>float</code></li> <li>Unity: <code>N</code></li> </ul> </li> </ul>"},{"location":"api/dataTypes/#material","title":"Material","text":"Python<pre><code>class Material:\ndef __init__(\nself,\nid=0,\nname=\"NONE\",\nbatch=\"\",\nsupplier_name=\"\",\nsupplier_contact_info=\"\",\nextra_info=\"\",\n):\nself.id = id\nself.name = name\nself.batch = batch\nself.supplier_name = supplier_name\nself.supplier_contact_info = supplier_contact_info\nself.extra_info = extra_info\n</code></pre> <ul> <li><code>id</code>:<ul> <li>type: <code>int</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>name</code>: <ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>batch</code>:<ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>supplier_name</code>:<ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>supplier_contact_info</code>:<ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>extra_info</code>:<ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> </ul>"},{"location":"api/dataTypes/#body","title":"Body","text":"Python<pre><code>class Body:\ndef __init__(\nself,\nid=0,\ntype=1,\nmaterial=Material(\nid=0,\nname=\"Base Material\",\nbatch=\"\",\nsupplier_name=\"\",\nsupplier_contact_info=\"\",\nextra_info=\"\",\n),\nparam_a=0,\nparam_b=0,\nheight=0,\nextra_info=\"\",\n):\nself.id = id\nself.type = type\nself.material = material\nself.param_a = param_a\nself.param_b = param_b\nself.height = height\nself.extra_info = extra_info\n</code></pre> <ul> <li><code>id</code>:<ul> <li>Type: <code>int</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>type</code>: Body format         * 1 = Rectangle         * 2 = Cylinder         * 3 = Tube         * 4 = Other         * Type: <code>int</code>         * Unity: N/A</li> <li><code>material</code>:<ul> <li>Type: <code>Material</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>param_a</code>: Param 'a' of the body<ul> <li>Rectangle = length</li> <li>Cylinder = External diameter</li> <li>Tube = External diameter</li> <li>Type: <code>float</code></li> <li>Unity: <code>mm</code></li> </ul> </li> <li><code>param_b</code>: Param 'b' of the body<ul> <li>Rectangle = depth</li> <li>Cylinder = NULL</li> <li>Tube = Internal diameter</li> <li>Type: <code>float</code></li> <li>Unity: <code>mm</code></li> </ul> </li> <li><code>height</code>: Height of the test body<ul> <li>Type: <code>float</code></li> <li>Unity: <code>mm</code></li> </ul> </li> <li><code>extra_info</code>:<ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> </ul>"},{"location":"api/dataTypes/#experiment","title":"Experiment","text":"Python<pre><code>class Experiment:\ndef __init__(\nself,\nid=0,\nname=\"None\",\nbody: Body = Body(\nid=0,\ntype=1,\nmaterial=Material(\nname=\"Material\",\nbatch=\"Batch\",\nsupplier_name=\"\",\nsupplier_contact_info=\"\",\nextra_info=\"\",\n),\nparam_a=0,\nparam_b=0,\nheight=0,\nextra_info=\"\",\n),\ndate_time=0,\nload_loss_limit=0,\nmax_load=0,\nmax_travel=0,\nmax_time=0,\nz_axis_speed=0,\ncompress=False,\nextra_info=\"\",\nplot_color=\"#ffffff\",\n):\nself.id = id\nself.name = name\nself.body = body\nself.date_time = date_time\nself.load_loss_limit = load_loss_limit\nself.max_load = max_load\nself.max_travel = max_travel\nself.max_time = max_time\nself.z_axis_speed = z_axis_speed\nself.compress = compress\nself.extra_info = extra_info\nself.plot_color = plot_color\n</code></pre> <ul> <li><code>id</code>:<ul> <li>Type: <code>int</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>name</code>: <ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>body</code>:<ul> <li>Type: <code>Body</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>date_time</code>: Date and time formatted as <code>dd/mm/yyyy</code><ul> <li>Type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>load_loss_limit</code>: Max load loss to trigger auto-stop.<ul> <li>Type: <code>float</code></li> <li>Unity: <code>N/s</code></li> </ul> </li> <li><code>max_load</code>: Max load limit to trigger auto-stop.<ul> <li>Type: <code>float</code></li> <li>Unity: <code>N</code></li> </ul> </li> <li><code>max_travel</code>: Max distance the experiment head can travel during the experiment.<ul> <li>Type: <code>float</code></li> <li>Unity: <code>mm</code></li> </ul> </li> <li><code>max_time</code>: Experiment time limit.<ul> <li>Type: <code>float</code></li> <li>Unity: <code>s</code></li> </ul> </li> <li><code>z_axis_speed</code>:<ul> <li>Type: <code>float</code></li> <li>Unity: <code>mm/s</code></li> </ul> </li> <li><code>compress</code>: Is the experiment type of compression? <code>false</code> implies expansion.<ul> <li>Type: <code>bool</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>extra_info</code>:<ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> <li><code>plot_color</code>: System parameter<ul> <li>type: <code>string</code></li> <li>Unity: N/A</li> </ul> </li> </ul>"},{"location":"api/front_end_api/","title":"Front end API","text":""},{"location":"api/front_end_api/#front-end-api","title":"Front end API","text":"<p>This page gathers all the API calls that can be used by the backend.</p> <p>Backend -&gt; Front end</p> <p>Warning</p> <p>The functions can only be called if they are available on the <code>web/build</code> directory, therefore if you make a change using <code>npm run serve</code> won't show it, you will need to rebuild the front end with <code>npm run buildWeb</code> or by using <code>npm run start</code>.</p> <p>Note</p> <p>These functions can only be called after eel is initiated with <code>eel.init()</code>.</p>"},{"location":"api/front_end_api/#core-api","title":"Core API","text":"<p>Collection of all functions/API calls available to the backend. You can find them in the <code>bolinho_api/core.py</code> file.</p> <p>The JavaScript file can be found in the api folder.</p>"},{"location":"api/front_end_api/#ping","title":"ping()","text":"<p>ping()</p> <p>Tries to ping the bolinho front-end, returns 1 if it worked</p> Python usage example<pre><code>from bolinho_api.core import core_api\nwhile True:\ntry:\nif core_api.ping():\nprint(\"got a ping!\")\nbreak\npass\nexcept:\neel.sleep(1)\n</code></pre>"},{"location":"api/front_end_api/#get_config_params","title":"get_config_params()","text":"<p>get_config_params()</p> <p>Tries to ping the bolinho front-end, returns 1 if it worked</p> Python usage example<pre><code>from bolinho_api.core import core_api\nconfig = core_api.get_config_params()\ncurrent_save_version = config[\"configVersion\"]\nprint(current_save_version)\n</code></pre> <p>This function is located at <code>src/web/src/App.js</code></p>"},{"location":"api/front_end_api/#go_to_experiment_page","title":"go_to_experiment_page()","text":"<p>go_to_experiment_page()</p> <p>Asks the front end to go to the experiment page.</p> <p>Returns 1 if succeeded.</p> Python usage example<pre><code>from bolinho_api.core import core_api\nchange_pages = True\nif change_pages:\ncore_api.go_to_experiment_page()\n</code></pre>"},{"location":"api/front_end_api/#go_to_home_page","title":"go_to_home_page()","text":"<p>go_to_home_page()</p> <p>Asks the front end to go to the home page.</p> <p>Returns 1 if succeeded.</p> Python usage example<pre><code>from bolinho_api.core import core_api\nchange_pages = True\nif change_pages:\ncore_api.go_to_home_page()\n</code></pre>"},{"location":"api/front_end_api/#set_is_connected","title":"set_is_connected()","text":"<p>set_is_connected()</p> <p>Sets the variable \"isConnected\" on the front-end.</p> Python usage example<pre><code>from bolinho_api.core import core_api\ncore_api.set_is_connected(True)\n</code></pre>"},{"location":"api/front_end_api/#refresh_data","title":"refresh_data()","text":"<p>refresh_data()</p> <p>Sets the variable \"isConnected\" on the front-end.</p> Python usage example<pre><code>from bolinho_api.core import core_api\nadd_material_to_db() #Arbitrary function that adds a material to the DB   \ncore_api.refresh_data()\n</code></pre>"},{"location":"api/front_end_api/#refresh_realtime_experiment_data","title":"refresh_realtime_experiment_data()","text":"<p>refresh_realtime_experiment_data()</p> <p>Triggers a call to refresh the data.</p> <p>It will refetch the data points of the current experiment.</p> <p>A use case is to trigger a refresh to show an update on the readings</p> Python usage example<pre><code>from bolinho_api.core import core_api\ncore_api.refresh_realtime_experiment_data()\n</code></pre>"},{"location":"api/front_end_api/#ui-api","title":"UI API","text":"<p>Collection of all functions/API calls available to the backend for UI in general. You can find them in the <code>bolinho_api/ui.py</code> file.</p> <p>The JavaScript file can be found in the api folder.</p>"},{"location":"api/front_end_api/#success_alerttext","title":"success_alert(text)","text":"<p>success_alert(text)</p> <p>Uses React-Toastify to create an success alert.</p> Python usage example<pre><code>from bolinho_api.ui import ui_api\nui_api.success_alert(\"Success!\")\n</code></pre>"},{"location":"api/front_end_api/#error_alerttext","title":"error_alert(text)","text":"<p>error_alert(text)</p> <p>Uses React-Toastify to create an error alert.</p> Python usage example<pre><code>from bolinho_api.ui import ui_api\nui_api.error_alert(\"Error!\")\n</code></pre>"},{"location":"api/front_end_api/#loading_alerttext-callback_func","title":"loading_alert(text, callback_func)","text":"<p>loading_alert(text, callback_func)</p> <p>Uses React-Toastify to create an loading alert.</p> <p>Returns the Toast ID Asynchronously to a <code>callback_func</code>.</p> <p>Must be used together with <code>update_alert</code>.</p> Python usage example<pre><code>def save_and_end(toast_id):\nbolinho_app.end_experiment()\nrun(bolinho_app.end_experiment())\ncore_api.go_to_home_page()\nui_api.update_alert(\"Salvo com sucesso!\", True, toast_id)\nui_api.loading_alert(\"AGUARDE! Salvando no banco...\", save_and_end)\n</code></pre>"},{"location":"api/front_end_api/#update_alerttext-success-id","title":"update_alert(text, success, id)","text":"<p>update_alert(text, success, id)</p> <p>Uses React-Toastify to update an existing alert.</p> <p>If success is set to true it displays a success other wise shows an error</p> Python usage example<pre><code>def save_and_end(toast_id):\nbolinho_app.end_experiment()\nrun(bolinho_app.end_experiment())\ncore_api.go_to_home_page()\nui_api.update_alert(\"Salvo com sucesso!\", True, toast_id)\nui_api.loading_alert(\"AGUARDE! Salvando no banco...\", save_and_end)\n</code></pre>"},{"location":"api/front_end_api/#prompt_userdescription-options-callback_func","title":"prompt_user(description, options, callback_func)","text":"<p>prompt_user(description, options, callback_func)</p> <p>Prompts the user with a 'description', and shows the 'options' to the user.</p> <p>The result is passed to the callback_function</p> Python usage example<pre><code>from bolinho_api.ui import ui_api\ndef get_result(result):\nif result == \"yes\":\nprint(\"The user chose yes\")\nprint(\"The user chose no\")\nui_api.prompt_user(\ndescription=\"Do you want to pay 1000?\", \noptions=[\"yes\", \"no\"], \ncallback_func= get_result,\n)\n</code></pre>"},{"location":"api/front_end_api/#set_focusfocus_element-str","title":"set_focus(focus_element: str)","text":"<p>error_alert(focus_element: str)</p> <p>Focus in an specific element on the frontend.</p> <p>WARNING Pay attention to the name of the element you are trying to focus</p> <p>You can find them at https://github.com/HefestusTec/bolinho/blob/main/src/web/src/api/apiTypes.ts</p> Python usage example<pre><code>from bolinho_api.ui import ui_api\nui_api.set_focus(\"connection-component\")\n</code></pre>"},{"location":"api/front_end_api/#set_save_experiment_progresstotal-int-amount-int","title":"set_save_experiment_progress(total: int, amount: int)","text":"<p>set_save_experiment_progress(total: int, amount: int)</p> <p>Set the progress bar experiment save.</p> Python usage example<pre><code>from bolinho_api.ui import ui_api\n# Sets the progress to 2%\nui_api.set_save_experiment_progress(100, 2)\n</code></pre>"},{"location":"api/front_end_api/#experiment-page-api","title":"Experiment page API","text":"<p>Collection of all functions/API calls available to the backend for the experiment routine. You can find them in the <code>bolinho_api/experiment.py</code> file.</p> <p>The JavaScript file can be found at <code>web/src/api/contexts/ExperimentPageContext.tsx</code>.</p>"},{"location":"api/front_end_api/#set_timenewvalue","title":"set_time(newValue)","text":"<p>set_time(newValue)</p> <p>Sets the current time of the experiment.</p> <p>This variable is shown to the user as value and progress bar.</p> Python usage example<pre><code>from bolinho_api.experiment import experiment_api\nexperiment_api.set_time(22)\n</code></pre>"},{"location":"api/front_end_api/#get_readings","title":"get_readings()","text":"<p>get_readings()</p> <p>Asks the front for the current Readings.</p> <p>Returns an object of type Readings, this object gathers all the current readings of the machine. Such as Current z axis position, current load, and status</p> Python usage example<pre><code>from bolinho_api.experiment import experiment_api\nreading_obj = experiment_api.get_readings()\nprint(reading_obj.status)\n</code></pre>"},{"location":"api/front_end_api/#set_readingsnewvalue","title":"set_readings(newValue)","text":"<p>set_readings(newValue)</p> <p>Sets the current Readings.</p> <p>Receives an object of type Readings, this object gathers all the current readings of the machine. Such as Current z axis position, current load, and status.</p> <p>This function dumps the object to a JSON and sends it to the front end</p> Python usage example<pre><code>from bolinho_api.experiment import experiment_api\nfrom bolinho_api.classes import Readings\nnew_machine_readings = Readings(299, 87, 300, \"not good\")\nexperiment_api.set_readings(new_machine_readings)\n</code></pre>"},{"location":"backEnd/","title":"Index","text":""},{"location":"backEnd/#back-end","title":"Back End","text":""},{"location":"backEnd/#dbhandlerpy","title":"DBHandler.py","text":"<p>Defines database models using orm_sqlite</p>"},{"location":"backEnd/#models","title":"Models","text":"<ul> <li>Material</li> <li>Experiment</li> <li>Body</li> <li>Reading</li> </ul>"},{"location":"backEnd/#classes","title":"Classes","text":""},{"location":"backEnd/#dbhandler","title":"DBHandler","text":"<p>Handles database connection and CRUD operations</p>"},{"location":"backEnd/#methods","title":"Methods","text":"<ul> <li>init(self, db_path)</li> <li>add_material(self, name, batch)</li> <li>add_experiment(self, name, material, date, time, load_loss_limit, max_load, max_travel, max_time, compress, z_axis_speed)</li> <li>add_reading(self, experiment, load, z_pos, time)</li> <li>get_materials(self)</li> <li>get_material_by_id(self, id)</li> <li>get_bodies(self)</li> <li>get_body_by_id(self, id)</li> <li>get_bodies_by_material(self, material)</li> <li>get_bodies_by_type(self, body_type)</li> <li>get_bodies_by_material_and_type(self, material, body_type)</li> <li>get_experiments(self)</li> <li>get_experiment_by_id(self, id)</li> <li>get_experiments_by_material(self, material)</li> <li>get_experiments_by_date(self, date)</li> <li>get_experiments_by_date_and_material(self, date, material)</li> <li>get_experiment_readings(self, experiment)</li> <li>delete_experiment_by_id(self, id)</li> <li>delete_material_by_id(self, id)</li> <li>populate(self)</li> </ul>"},{"location":"backEnd/#datahandlerpy","title":"DataHandler.py","text":"<p>Handles Raspberry Pi GPIO and data acquisition</p>"},{"location":"backEnd/#classes_1","title":"Classes","text":""},{"location":"backEnd/#datahandler","title":"DataHandler","text":"<p>Abstract class for data acquisition</p>"},{"location":"backEnd/#loadcell","title":"LoadCell","text":"<p>Handles load cell data acquisition</p>"},{"location":"backEnd/#stepmotor","title":"StepMotor","text":"<p>Handles step motor data acquisition</p>"},{"location":"backEnd/DBHandler/","title":"DBHandler","text":""},{"location":"backEnd/DBHandler/#dbhandler","title":"DBHandler","text":""},{"location":"backEnd/DBHandler/#dbhandlerpy","title":"DBHandler.py","text":"<p>Defines database models using orm_sqlite</p>"},{"location":"backEnd/DBHandler/#models","title":"Models","text":"<ul> <li>Material</li> <li>id : Integer Primary Key</li> <li>name: String</li> <li> <p>batch: String</p> </li> <li> <p>Experiment</p> </li> <li>id : Integer Primary Key</li> <li>name: String</li> <li>material: Integer Foreign Key</li> <li>date: Date</li> <li>time: Time</li> <li>load_loss_limit: Float</li> <li>max_load: Float</li> <li>max_travel: Float</li> <li>max_time: Float</li> <li>compress: Boolean</li> <li> <p>z_axis_speed: Float</p> </li> <li> <p>Body</p> </li> <li>id : Integer Primary Key</li> <li>body_type: String</li> <li>material: Integer Foreign Key</li> <li>param_a: Float</li> <li>param_b: Float</li> <li> <p>height: Float</p> </li> <li> <p>Reading</p> </li> <li>id: Integer Primary Key</li> <li>experiment: Integer Foreign Key</li> <li>load: Float</li> <li>z_pos: Float</li> <li>time: Float</li> </ul>"},{"location":"backEnd/DBHandler/#classes","title":"Classes","text":""},{"location":"backEnd/DBHandler/#dbhandler_1","title":"DBHandler","text":"<p>Handles database connection and CRUD operations</p>"},{"location":"backEnd/DBHandler/#methods","title":"Methods","text":"<ul> <li>init(self, db_path)</li> <li>Creates database connection, binds models to database, creates and populates the database if it doesn't exist</li> <li> <p>db_path: Path to database file</p> </li> <li> <p>add_material(self, name, batch)</p> </li> <li>name: Name of the material</li> <li> <p>batch: Batch number of the material</p> </li> <li> <p>add_experiment(self, name, material, date, time, load_loss_limit, max_load, max_travel, max_time, compress, z_axis_speed)</p> </li> <li>name: Name of the experiment</li> <li>material: Name of the material</li> <li>date: Date of the experiment</li> <li>time: Time of the experiment</li> <li>load_loss_limit: Load loss limit of the experiment</li> <li>max_load: Maximum load of the experiment</li> <li>max_travel: Maximum travel of the experiment</li> <li>max_time: Maximum time of the experiment</li> <li>compress: Whether the experiment is compressive or not</li> <li> <p>z_axis_speed: Speed of the z axis</p> </li> <li> <p>add_reading(self, experiment, load, z_pos, time)</p> </li> <li>experiment: Name of the experiment</li> <li>load: Load of the reading</li> <li>z_pos: Z position of the reading</li> <li> <p>time: Time of the reading</p> </li> <li> <p>get_materials(self)</p> </li> <li> <p>Returns all materials in the database</p> </li> <li> <p>get_material_by_id(self, id)</p> </li> <li>id: Id of the material</li> <li> <p>Returns the material with the given id</p> </li> <li> <p>get_bodies(self)</p> </li> <li> <p>Returns all bodies in the database</p> </li> <li> <p>get_body_by_id(self, id)</p> </li> <li>id: Id of the body</li> <li> <p>Returns the body with the given id</p> </li> <li> <p>get_bodies_by_material(self, material)</p> </li> <li>material: Name of the material</li> <li> <p>Returns all bodies with the given material</p> </li> <li> <p>get_bodies_by_type(self, body_type)</p> </li> <li>body_type: Type of the body</li> <li> <p>Returns all bodies with the given type</p> </li> <li> <p>get_bodies_by_material_and_type(self, material, body_type)</p> </li> <li>material: Name of the material</li> <li>body_type: Type of the body</li> <li> <p>Returns all bodies with the given material and type</p> </li> <li> <p>get_experiments(self)</p> </li> <li> <p>Returns all experiments in the database ordered by date and time descending</p> </li> <li> <p>get_experiment_by_id(self, id)</p> </li> <li>id: Id of the experiment</li> <li> <p>Returns the experiment with the given id</p> </li> <li> <p>get_experiments_by_material(self, material)</p> </li> <li>material: Name of the material</li> <li> <p>Returns all experiments with the given material</p> </li> <li> <p>get_experiments_by_date(self, date)</p> </li> <li>date: Date of the experiment</li> <li> <p>Returns all experiments with the given date</p> </li> <li> <p>get_experiments_by_date_and_material(self, date, material)</p> </li> <li>date: Date of the experiment</li> <li>material: Name of the material</li> <li> <p>Returns all experiments with the given date and material</p> </li> <li> <p>get_experiment_readings(self, experiment)</p> </li> <li>experiment: Name of the experiment</li> <li> <p>Returns all readings of the given experiment</p> </li> <li> <p>delete_experiment_by_id(self, id)</p> </li> <li>id: Id of the experiment</li> <li> <p>Deletes the experiment with the given id and all its readings</p> </li> <li> <p>delete_material_by_id(self, id)</p> </li> <li>id: Id of the material</li> <li> <p>Deletes the material with the given id and all its experiments and readings</p> </li> <li> <p>populate(self)</p> </li> <li>Populates the database with some dummy data</li> </ul>"},{"location":"backEnd/DataHandler/","title":"DataHandler","text":""},{"location":"backEnd/DataHandler/#datahandler","title":"DataHandler","text":""},{"location":"backEnd/DataHandler/#datahandlerpy","title":"DataHandler.py","text":"<p>Handles Raspberry Pi GPIO and data acquisition</p>"},{"location":"backEnd/DataHandler/#classes","title":"Classes","text":""},{"location":"backEnd/DataHandler/#datahandler_1","title":"DataHandler","text":"<p>Abstract class for data acquisition</p>"},{"location":"backEnd/DataHandler/#loadcell","title":"LoadCell","text":"<p>[NOT IMPLEMENTED]</p> <p>Handles load cell data acquisition</p>"},{"location":"backEnd/DataHandler/#stepmotor","title":"StepMotor","text":"<p>[NOT IMPLEMENTED]</p> <p>Handles step motor data acquisition</p>"},{"location":"backEnd/Routines/","title":"Routines","text":""},{"location":"backEnd/Routines/#routines","title":"Routines","text":"<p>This page is a summary of the routines of the machine.</p>"},{"location":"embedded/","title":"Embedded","text":""},{"location":"embedded/#embedded","title":"Embedded","text":"<p>Bolinho uses a microcontroller esp32-s3 for controlling the hardware.</p> <p>For more info check the Granulado repository.</p>"},{"location":"embedded/#serial-communication","title":"Serial communication","text":"<p>The microcontroller communicates via serial to the host, and is responsible for reading the load cell and controlling the stepper motor.</p> <p>This communication is done via interrogation, so that the host prompts the peripheral for data and it complies.</p>"},{"location":"embedded/#protocol","title":"Protocol:","text":"<p>These are the available commands for the communication between the host and the peripheral.</p> <p>A instruction is divided in three parts:</p> <p><code>command</code> <code>data</code> <code>\\n</code></p> <ul> <li><code>command</code> is a 1 byte <code>character</code>.</li> <li><code>data</code> is the payload as a <code>string</code> it can be also empty.</li> <li><code>\\n</code> is the line terminator to identify the end of an instruction.</li> </ul>"},{"location":"embedded/#bolinho-granulado","title":"Bolinho -&gt; Granulado","text":"<ul> <li> <p><code>p</code> -&gt; Ping </p> </li> <li> <p><code>m[str]</code> -&gt; Moves stepper motor x millimeters. </p> <p>str is an <code>int</code> in <code>string</code> format.</p> </li> <li> <p><code>s</code> -&gt; Stop </p> </li> <li> <p><code>t</code> -&gt; Move to top </p> </li> <li> <p><code>g</code> -&gt; Get motor position millimeters. </p> </li> <li> <p><code>r</code> -&gt; Get instantaneous reading. </p> </li> <li> <p><code>@</code> -&gt; Tare load cell </p> </li> <li> <p><code>w</code> -&gt; Calibrate known weight </p> </li> <li> <p><code>x[str]</code> -&gt; Set known weight </p> <p>str is an <code>int</code> with the weight in <code>grams</code> in <code>string</code> format.</p> </li> <li> <p><code>y[str]</code> -&gt; Set z-axis length </p> <p>str is an <code>int</code> with the length of the z-axis in <code>millimeters</code> in <code>string</code> format.</p> </li> <li> <p><code>j</code> -&gt; Get z-axis length </p> </li> <li> <p><code>d</code> -&gt; Get delta load </p> </li> <li> <p><code>l[str]</code> -&gt; Set max load </p> <p>str is an <code>int</code> with the maximum experiment load in <code>grams</code> in <code>string</code> format.</p> </li> <li> <p><code>v[str]</code> -&gt; Set max travel </p> <p>str is an <code>int</code> with the maximum experiment travel in <code>mm</code> in <code>string</code> format.</p> </li> <li> <p><code>a[str]</code> -&gt; Set max delta load </p> <p>str is an <code>int</code> with the maximum experiment delta load in <code>grams / second</code> in <code>string</code> format.</p> </li> <li> <p><code>e[str]</code> -&gt; Set motor speed </p> <p>str is an <code>int</code> with the maximum experiment travel in <code>RPM</code> in <code>string</code> format.</p> </li> <li> <p><code>-</code> -&gt; Nothing</p> </li> </ul>"},{"location":"embedded/#granulado-bolinho","title":"Granulado -&gt; Bolinho","text":"<ul> <li> <p><code>p</code> -&gt; Ping Response</p> </li> <li> <p><code>e[str]</code> -&gt; Erro.</p> <p>str is an <code>string</code> with the description of the error.</p> </li> <li> <p><code>r[str]</code> -&gt; Returns current reading</p> <p>str is an <code>int</code> in <code>grams</code> in <code>string</code> format.</p> </li> <li> <p><code>g[str]</code> -&gt; Returns current position in millimeters</p> <p>str is an <code>int</code> in <code>string</code> format.</p> </li> <li> <p><code>j[str]</code> -&gt; Returns z-axis length</p> <p>str is an <code>int</code> in <code>string</code> format.</p> </li> <li> <p><code>b</code> -&gt; Bottom interrupt was triggered</p> </li> <li> <p><code>t</code> -&gt; Top interrupt was triggered</p> </li> <li> <p><code>d[str]</code> -&gt; Returns delta load</p> <p>str is an <code>int</code> in <code>string</code> format.</p> </li> <li> <p><code>s</code> -&gt; Response to the stop command</p> </li> <li> <p><code>i[str]</code> -&gt; Debug info</p> <p>str is any <code>string</code> to be shown on the terminal.</p> </li> </ul>"},{"location":"frontEnd/","title":"Front End","text":"<p>As front end framework/library we are using ReactJs.</p> <p>You can check out the about page for a list of the third party projects being used.</p>"},{"location":"frontEnd/#global-variables","title":"Global variables","text":"<p>The global variables can be found at <code>variables.css</code>. You can import it into your stylesheet using</p> CSS<pre><code>@import url(./variables.css);\n</code></pre>"},{"location":"frontEnd/#component-architecture","title":"Component architecture","text":"<pre><code>flowchart TD\n    App --&gt; MainPage\n    App --&gt; ExperimentPage\n    MainPage --&gt; SideBar\n    SideBar --&gt; Header\n    MainPage --&gt; Content\n    Content --&gt; In\u00edcio\n    Content --&gt; Calibrar\n    Content --&gt; Controlar\n    Content --&gt; Config.\n    Content --&gt; Sobre\n</code></pre>"},{"location":"frontEnd/alerts/","title":"Alerts","text":""},{"location":"frontEnd/alerts/#alerts","title":"Alerts","text":"<p>This project is using react-toastify to handle alerts. If you want more in-depth info about them please refer to the documentation.</p>"},{"location":"frontEnd/alerts/#usage","title":"Usage","text":"<p>Here is an exemple of how you can create an alert.</p> JSX<pre><code>import React from \"react\";\nimport { toast } from \"react-toastify\";\nexport default function myComponent() {\nconst iWasPressed = () =&gt; {\n// This will show an error alert.\ntoast.error(\"N\u00e3o foi poss\u00edvel acessar o backend\");\n};\nreturn(\n&lt;button onClick={iWasPressed}&gt;\nPress me :D\n&lt;/button&gt;\n);\n}\n</code></pre>"},{"location":"frontEnd/components/","title":"Components","text":""},{"location":"frontEnd/components/#components","title":"Components","text":"<p>Most custom React components are here</p>"},{"location":"frontEnd/components/#zoomcomponent","title":"ZoomComponent","text":"<p>Component that enables zooming on it's contents, press and hold to zoom in.</p> <p>It uses the use-long-press rook to handle this action.</p> <p>You can enable/disable and change the activation time on the <code>GlobalConfigContext</code> context.</p>"},{"location":"frontEnd/components/#props","title":"Props","text":"JSX<pre><code>{\nscaleOrigin = \"top\",\nclassName = \"\",\nchildren,\n}\n</code></pre> <ul> <li><code>scaleOrigin</code>: What is the origin point (which direction does it grows).</li> <li><code>className</code>: ClassName of the component.</li> <li><code>children</code>: Children props, Don't worry about it.</li> </ul>"},{"location":"frontEnd/components/#usage-example","title":"Usage example","text":"JSX<pre><code>import ZoomComponent from \"../zoomComponent/zoomComponent\";\nimport ExperimentsInspector from \"./experimentsInspector/experimentsInspector\";\nexport default function exampleComponent(){\nreturn(\n&lt;ZoomComponent\nclassName={styleModule.experiments_inspector}\nscaleOrigin=\"bottom left\"\n&gt;\n&lt;ExperimentsInspector /&gt;\n&lt;/ZoomComponent&gt;\n);\n} </code></pre>"},{"location":"frontEnd/components/#experimentinspector","title":"ExperimentInspector","text":"<p>This component makes use of the <code>SelectedObjectsContext</code>.</p> <p>The experiment inspector component holds the following children:</p> <ul> <li><code>ColorPicker</code>: Color picker component for choosing the color of the active experiment.</li> <li><code>ExperimentButton</code>: Buttons that make the list of selected experiments.</li> <li><code>ExperimentDescription</code>: Component that parses the description of the active material.</li> </ul>"},{"location":"frontEnd/components/#props_1","title":"Props","text":"<p><code>none</code></p>"},{"location":"frontEnd/components/#usage-example_1","title":"Usage example","text":"JSX<pre><code>import { eel } from \"./App\";\nimport ExperimentsInspector from \"./experimentsInspector/experimentsInspector\";\nexport default function exampleComponent(){\nconst getMaterialList = async () =&gt; {\ntry {\nconst materialList = JSON.parse(await eel.get_material_list()());\nreturn materialList;\n} catch (error) {\nreturn [];\n}\n};\nreturn(\n&lt;SelectedObjectsContext.Provider&gt;\n&lt;ExperimentsInspector /&gt;\n&lt;/SelectedObjectsContext.Provider&gt;\n);\n} </code></pre>"},{"location":"frontEnd/components/#materialselector","title":"MaterialSelector","text":"<p>The <code>MaterialSelector</code> component holds the following children:</p> <ul> <li><code>MaterialSelectorButton</code>: Buttons that make the list of available experiments.<ul> <li><code>DropdownButton</code>: Buttons that make a dropdown, so the user can choose which experiment they want to inspect.</li> </ul> </li> </ul> <p>It can be wrapped with the <code>ZoomComponent</code> to allow zooming.</p>"},{"location":"frontEnd/components/#props_2","title":"Props","text":"JSX<pre><code>{\nmaterialList // List of available materials, fetched from the backend\n}\n</code></pre>"},{"location":"frontEnd/components/#usage-example_2","title":"Usage example","text":"JSX<pre><code>import { eel } from \"./App\";\nimport MaterialSelector from \"./materialSelector/materialSelector\";\nexport default function exampleComponent(){\nconst getMaterialList = async () =&gt; {\ntry {\nconst materialList = JSON.parse(await eel.get_material_list()());\nreturn materialList;\n} catch (error) {\nreturn [];\n}\n};\nreturn(\n&lt;MaterialSelector materialList={getMaterialList} /&gt;\n);\n} </code></pre>"},{"location":"frontEnd/contexts/","title":"Contexts","text":""},{"location":"frontEnd/contexts/#contexts","title":"Contexts","text":"<p>This page contains all the contexts used on the application.</p>"},{"location":"frontEnd/contexts/#globalconfigcontext","title":"GlobalConfigContext","text":"JSX<pre><code>{\ntheme: \"light\", // light | dark\nanimationSpeed: \"slow\", // fast | slow | off\nanimateGraph: \"on\", // on | off\nenableZoom: true, // Should zooming be enable?\nzoomDelay: 300, // How long [ms] should I press to zoom\nblurOnZoom: true, // Should it blur when zooming?\nabsoluteMaximumLoad: 10000,\n}\n</code></pre>"},{"location":"frontEnd/contexts/#selectedobjectscontext","title":"SelectedObjectsContext","text":"<p>This context is acessible to the children of the <code>MainPage</code> component. It holds a list of the selected objects \"experiments data\". JSX<pre><code>{\nmaterial, // material_fragment\nexperiment, // experiment_fragment\ndata_array, // data_array_fragment,\ncolor, // color associated to an experiment\n}\n</code></pre></p>"},{"location":"frontEnd/pages/","title":"Pages","text":""},{"location":"frontEnd/pages/#pages","title":"Pages","text":"<p>The following pages are just place holders / mockups of the final application.</p>"},{"location":"frontEnd/pages/#initial-page","title":"Initial page","text":""},{"location":"frontEnd/pages/#main","title":"Main","text":"<p>Initial page of the application, you are able to: </p> <ul> <li> <p>Visualize previous experiments;</p> </li> <li> <p>Exclude experiments;</p> </li> <li> <p>Exclude materials;</p> </li> <li> <p>Access different sub-pages;</p> </li> <li> <p>Generate report; and more!.</p> </li> </ul>"},{"location":"frontEnd/pages/#calibration-sub-page","title":"Calibration sub-page","text":""},{"location":"frontEnd/pages/#control-sub-page","title":"Control sub-page","text":""},{"location":"frontEnd/pages/#configuration-sub-page","title":"Configuration sub-page","text":""},{"location":"frontEnd/pages/#about-sub-page","title":"About sub-page","text":""},{"location":"frontEnd/pages/#experiment-page","title":"Experiment page","text":""},{"location":"frontEnd/pages/#main_1","title":"Main","text":""},{"location":"frontEnd/styling/","title":"Styling","text":""},{"location":"frontEnd/styling/#styling","title":"Styling","text":"<p>Here we will show some tips and styling techniques used on this project.</p>"},{"location":"frontEnd/styling/#linking-stylesheets-to-a-component","title":"Linking stylesheets to a component","text":"<p>Stylesheets are made with <code>style.module.css</code> and imported into the <code>.jsx</code> or <code>.tsx</code> allowing us to use it as an object to name <code>className</code>s.</p> <p>As for naming convention snake case is being used for styling names</p> JSX<pre><code>import styleModule from \"./mainPage.module.css\";\n&lt;div className={styleModule.my_custom_div}&gt;\nIm a styled div\n&lt;div&gt;\n</code></pre>"},{"location":"frontEnd/styling/#adding-ellipsis","title":"Adding ellipsis","text":"<p>You can add ellipsis to most texts using the following code</p> CSS<pre><code>white-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\n</code></pre> <p>Tip</p> <p>This must not be wrapped in a <code>flex</code> div, therefore we recommend you using a div only for the text, for example: JSX<pre><code>&lt;div className=\"my-cool-div\"&gt;\n&lt;div className=\"my-text\"&gt;\nThis text will add ellipsis when it overflows.\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> CSS<pre><code>.my-text{\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\n}\n</code></pre>"},{"location":"manual_do_usuario/","title":"Manual do usu\u00e1rio","text":""},{"location":"manual_do_usuario/#manual-do-usuario","title":"Manual do usu\u00e1rio","text":"<p>Aqui voc\u00ea encontrar\u00e1 o manual do usu\u00e1rio de todo o sistema do Bolinho.</p>"},{"location":"manual_do_usuario/#conhecendo-os-componentes","title":"Conhecendo os componentes","text":"<p>O sistema Bolinho \u00e9 composto por dois componentes diferentes, o Bolinho e o Granulado</p> <p>Para informa\u00e7\u00f5es sobre a configura\u00e7\u00e3o visite a p\u00e1gina Manual do usu\u00e1rio - configura\u00e7\u00e3o.</p>"},{"location":"manual_do_usuario/#bolinho","title":"Bolinho","text":"<p>Bolinho \u00e9 a interface humana respons\u00e1vel por orquestrar todo o funcionamento do sistema Bolinho.</p> <p></p> <p>Bolinho \u00e9 uma aplica\u00e7\u00e3o padr\u00e3o de computador, e atualmente suporta Linux ou Windows como seu sistema operacional.</p> <p>Info</p> <p>Bolinho foi testado na distribui\u00e7\u00e3o Debian da OrangePI no hardware OrangePI 5 8Gb RAM</p> <p>Ao longo desse manual o nome <code>host</code> ir\u00e1 se referir ao computador no qual o Bolinho est\u00e1 instalado.</p> <p>O reposit\u00f3rio com o c\u00f3digo fonte do bolinho pode ser encontrado em https://github.com/HefestusTec/bolinho junto com sua documenta\u00e7\u00e3o.</p>"},{"location":"manual_do_usuario/#granulado","title":"Granulado","text":"<p>Granulado \u00e9 o firmware embarcado do sistema, este \u00e9 respons\u00e1vel pela interface com o hardware e seu driver.</p> <p>O firmware foi escrito para atuar no ESP32-S3 e utiliza um USB para sua comunica\u00e7\u00e3o serial com o Bolinho. Mais informa\u00e7\u00f5es especificas sobre o embarcado podem ser encontradas em embedded.</p> <p>Para informa\u00e7\u00f5es sobre a sua configura\u00e7\u00e3o visite a p\u00e1gina Manual do usu\u00e1rio - configura\u00e7\u00e3o.</p> <p>O reposit\u00f3rio com o c\u00f3digo fonte do bolinho pode ser encontrado em https://github.com/HefestusTec/granulado.</p>"},{"location":"manual_do_usuario/#sobre-a-documentacao","title":"Sobre a documenta\u00e7\u00e3o","text":"<p>A documenta\u00e7\u00e3o \u00e9 uma cole\u00e7\u00e3o completa de todas as informa\u00e7\u00f5es pertinentes ao sistema Bolinho. Ela est\u00e1 escrita predominantemente em Ingl\u00eas e possui o t\u00f3pico Manual do Usu\u00e1rio escrito em Portugu\u00eas.</p> <p>Toda a documenta\u00e7\u00e3o do Bolinho est\u00e1 dispon\u00edvel em dois formatos <code>P\u00e1gina est\u00e1tica</code> e <code>PDF</code></p> <p>Aten\u00e7\u00e3o</p> <p>A Hefestus n\u00e3o se compromete em manter os arquivos relacionados a documenta\u00e7\u00e3o acess\u00edveis, caso deseje mant\u00ea-los voc\u00ea pode fazer uma c\u00f3pia local de toda a documenta\u00e7\u00e3o</p>"},{"location":"manual_do_usuario/#pagina-estatica","title":"P\u00e1gina est\u00e1tica","text":"<p>O que s\u00e3o? Paginas est\u00e1ticas s\u00e3o p\u00e1ginas que podem ser abertas diretamente sem a necessidade de um servidor para servi-las, entretanto caso voc\u00ea queira tamb\u00e9m pode servi-la VOC\u00ca MESMO! Isso garante que todo o conte\u00fado ser\u00e1 somente acess\u00edvel a voc\u00ea / empresa.</p> <p>Aten\u00e7\u00e3o</p> <p>Algumas ferramentas como por exemplo a busca, apenas est\u00e3o dispon\u00edveis se a p\u00e1gina estiver sendo servida.</p> <p>Quais os benef\u00edcios? P\u00e1ginas est\u00e1ticas permitem diferentes funcionalidades, n\u00e3o ficando restringido a um formato de folha de papel, e por se tratar de uma p\u00e1gina minimamente responsiva permite que todo o trabalho de renderizar os conte\u00fados sejam feitos no momento de compila\u00e7\u00e3o do c\u00f3digo.</p> <p>Onde encontro os arquivos? Os arquivos relacionados a p\u00e1gina est\u00e1tica podem ser encontrados na branch gh-pages do reposit\u00f3rio do Bolinho.</p> <p>Como rodar? Para ver os conte\u00fados de uma p\u00e1gina est\u00e1tica basta abrir o arquivo <code>index.html</code> encontrado na root do diret\u00f3rio com seu navegador de prefer\u00eancia! Ex.: Google Chrome, Microsoft Edge, Firefox etc.</p>"},{"location":"manual_do_usuario/#pdf","title":"PDF","text":"<p>Esta documenta\u00e7\u00e3o tamb\u00e9m gera automaticamente uma vers\u00e3o em PDF, o qual voc\u00ea poder\u00e1 usar para compatibilidade retroativa com sua documenta\u00e7\u00e3o j\u00e1 existente!</p> <p>O PDF pode ser encontrado aqui</p> <p>Aten\u00e7\u00e3o</p> <p>Talvez esse link n\u00e3o esteja mais dispon\u00edvel por isso mantenha uma c\u00f3pia do PDF localmente.</p>"},{"location":"manual_do_usuario/calibracao/","title":"Calibra\u00e7\u00e3o","text":""},{"location":"manual_do_usuario/calibracao/#calibracao","title":"Calibra\u00e7\u00e3o","text":"<p>Neste capitulo vamos aprender como conectar ao Granulado pela primeira vez.</p> <p>Para iniciar garanta que o Motor de passo est\u00e1 DESLIGADO isso \u00e9 de suma import\u00e2ncia para sua seguran\u00e7a, como apontado no item Alimenta\u00e7\u00e3o o motor de passo pode ser acionado independentemente do resto do Granulado.</p>"},{"location":"manual_do_usuario/calibracao/#conectando-ao-granulado","title":"Conectando ao Granulado","text":"<p>Na tela inicial no componente <code>Conex\u00e3o</code> expanda o campo <code>Porta</code> e selecione o seu dispositivo correto.</p> <p></p> <p>Dica</p> <p>Caso seu dispositivo n\u00e3o apare\u00e7a na lista voc\u00ea pode tentar <code>Atualizar</code> a lista de portas</p> <p>Ao pressionar <code>Conectar</code> o componente de <code>Conex\u00e3o</code> e o <code>Bot\u00e3o de ensaio</code> devem ser atualizados.</p> <p></p> <p>Nesse momento o Bolinho est\u00e1 conectado ao Granulado.</p>"},{"location":"manual_do_usuario/calibracao/#pagina-calibrar","title":"P\u00e1gina <code>Calibrar</code>","text":"<p>Atrav\u00e9s do menu lateral acesse a p\u00e1gina <code>Calibrar</code>. Voc\u00ea deve ser recebido com uma tela similar a:</p> <p></p> <p>Conhecendo os componentes:</p>"},{"location":"manual_do_usuario/calibracao/#componente-comandos","title":"Componente <code>Comandos</code>","text":"<p>Esse componente envia alguns comandos para o Granulado executar.</p> <ul> <li> <p><code>Tarar carga</code>: Tara a carga para um peso especifico</p> </li> <li> <p><code>Calibrar peso padr\u00e3o</code>: Calibra a c\u00e9lula de carga para um peso conhecido.</p> </li> </ul>"},{"location":"manual_do_usuario/calibracao/#componente-leituras","title":"Componente <code>Leituras</code>","text":"<p>Esse componente apresenta as leituras atuais em tempo real que recebeu do Granulado.</p> <ul> <li> <p><code>Status</code>: Status do Granulado <code>Desconectado</code> ou <code>Conectado</code>.</p> </li> <li> <p><code>Carga atual</code>: Carga atual na c\u00e9lula de carga.</p> </li> <li> <p><code>\u0394 Carga atual</code>: Varia\u00e7\u00e3o da carga em tempo real.</p> </li> </ul>"},{"location":"manual_do_usuario/calibracao/#componente-parametros-de-calibracao","title":"Componente <code>Par\u00e2metros de calibra\u00e7\u00e3o</code>","text":"<p>Esse componente permite que o usu\u00e1rio configure os Par\u00e2metros de calibra\u00e7\u00e3o do equipamento.</p>"},{"location":"manual_do_usuario/calibracao/#componente-botao-de-parada","title":"Componente <code>Bot\u00e3o de parada</code>","text":"<p>Esse componente envia um comando de parar o motor imediatamente ao Granulado.</p> <p>Aten\u00e7\u00e3o</p> <p>N\u00e3o deve ser usado como parada de emerg\u00eancia, sempre esteja pronto para acionar o Bot\u00e3o de emerg\u00eancia F\u00cdSICO</p>"},{"location":"manual_do_usuario/calibracao/#fluxos-de-trabalho","title":"Fluxos de trabalho","text":"<p>A seguir \u00e9 apresentado um simples fluxo de trabalho de como calibrar os diferentes componentes:</p>"},{"location":"manual_do_usuario/calibracao/#calibrar-a-celula-de-carga","title":"Calibrar a C\u00e9lula de carga","text":"<ol> <li>Garanta que o motor de passo N\u00e3o est\u00e1 ativo.</li> <li>Instale o aparato de ensaio \u00e0 c\u00e9lula de carga.</li> <li>Conecte o Granulado ao Bolinho.</li> <li>V\u00e1 a p\u00e1gina de calibra\u00e7\u00e3o</li> <li>Pressione Tarar carga.</li> <li>Verifique a configura\u00e7\u00e3o do Peso padr\u00e3o</li> <li>Instale o peso padr\u00e3o</li> <li>Pressione Calibrar peso padr\u00e3o.</li> <li> <p>Sucesso!</p> Sua c\u00e9lula de carga deve estar calibrada! </li> </ol>"},{"location":"manual_do_usuario/calibracao/#calibrar-o-eixo-z","title":"Calibrar o Eixo-z","text":"<ol> <li> <p>PERIGO</p> Garanta que voc\u00ea seguiu os passos de Precau\u00e7\u00f5es com o motor de passo. </li> <li>Conecte o Granulado ao Bolinho.</li> <li>Ligue o motor de passo.</li> <li>V\u00e1 para a pagina <code>Calibrar</code></li> <li>Insira o Tamanho do eixo Z</li> <li>V\u00e1 para a pagina <code>Controlar</code></li> <li>Execute <code>1 revolu\u00e7\u00e3o</code></li> <li>Me\u00e7a quantos <code>mm</code> a m\u00e1quina avan\u00e7ou em 1 revolu\u00e7\u00e3o.</li> <li>V\u00e1 para a pagina <code>Calibrar</code></li> <li>Insira o mm por revolu\u00e7\u00e3o</li> <li>Salve</li> <li> <p>Sucesso!</p> Seu eixo-z deve estar calibrado! </li> </ol>"},{"location":"manual_do_usuario/configuracao/","title":"Configura\u00e7\u00e3o","text":""},{"location":"manual_do_usuario/configuracao/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este capitulo apresentar\u00e1 as informa\u00e7\u00f5es de como configurar os diferentes componentes do Bolinho.</p> <p>A p\u00e1gina de configura\u00e7\u00f5es \u00e9 acessada atrav\u00e9s do menu lateral</p> <p></p>"},{"location":"manual_do_usuario/configuracao/#temas","title":"Temas","text":"<p>O componente <code>Temas</code> permite que o usu\u00e1rio modifique a apresenta\u00e7\u00e3o da interface gr\u00e1fica</p> <p></p>"},{"location":"manual_do_usuario/configuracao/#efeitos-visuais","title":"Efeitos visuais","text":"<p>O componente <code>Efeitos visuais</code> controla artificios extras da interface, os diferentes efeitos possuem um impacto na performance.</p> <ul> <li> <p><code>Sombras</code>: Ativa ou desativa sombras</p> <p>Desativar as sombras pode melhorar a performance da interface.</p> </li> <li> <p><code>Anima\u00e7\u00f5es</code>: Modifica a velocidade das anima\u00e7\u00f5es</p> <ul> <li><code>R\u00e1pido</code>: Velocidade r\u00e1pida das anima\u00e7\u00f5es.</li> <li><code>Normal</code>: Velocidade padr\u00e3o das anima\u00e7\u00f5es.</li> <li><code>Desligado</code>: Desativa as anima\u00e7\u00f5es. <p>Desativar as anima\u00e7\u00f5es pode melhorar a performance da interface.</p> </li> </ul> </li> <li> <p><code>Indicador de sele\u00e7\u00e3o</code>: Ativa ou desativa o indicador de sele\u00e7\u00e3o ao passar o mouse por cima.</p> <p>Desativa-lo melhora a visualiza\u00e7\u00e3o em dispositivos touch screen.</p> </li> </ul>"},{"location":"manual_do_usuario/configuracao/#limites-globais","title":"Limites globais","text":"<p>Configura os limites globais da aplica\u00e7\u00e3o. Durante a cria\u00e7\u00e3o de um experimento os limites de parada n\u00e3o poder\u00e3o exceder os globais.</p> <p>\u00c1rea perigosa</p> <p>\u00c9 importante que os limites globais sejam configurados propriamente para que n\u00e3o possam ser criados experimentos excedam os limites operacionais de seu maquin\u00e1rio. Preste muita aten\u00e7\u00e3o ao configurar a <code>Velocidade m\u00e1xima</code>, valores muito altos podem DANIFICAR O EQUIPAMENTO e colocar a seguran\u00e7a do operador em risco.</p>"},{"location":"manual_do_usuario/configuracao/#outros","title":"Outros","text":"<ul> <li> <p><code>Texto</code>: Modifica o tamanho do texto da interface.</p> </li> <li> <p><code>Pontos vis\u00edveis</code>: Modifica o numero de pontos vis\u00edveis durante a inspe\u00e7\u00e3o de um experimento. Essa configura\u00e7\u00e3o determina a precis\u00e3o de visualiza\u00e7\u00e3o ou seja, quanto maior maior ser\u00e1 a precis\u00e3o com o zoom afastado, entretanto ao dar zoom em um experimento sua precis\u00e3o ser\u00e1 melhorada automaticamente.</p> <p>Recomendamos deixar no padr\u00e3o de <code>1k pontos</code> ou diminuir para <code>500 pontos</code> caso a performance esteja baixa.</p> </li> </ul>"},{"location":"manual_do_usuario/controle_manual/","title":"Controle manual","text":""},{"location":"manual_do_usuario/controle_manual/#controle-manual","title":"Controle manual","text":"<p>Este capitulo discutir\u00e1 como controlar o maquin\u00e1rio manualmente. Essa fun\u00e7\u00e3o \u00e9 importante para posicionar a c\u00e9lula de carga na posi\u00e7\u00e3o correta para iniciar um experimento.</p>"},{"location":"manual_do_usuario/controle_manual/#ativando-o-motor","title":"Ativando o motor","text":"<p>Primeiro conecte o Granulado ao Bolinho, vide: Instalando o Granulado e Conectando ao Granulado.</p> <p>PERIGO</p> <p>Garanta que voc\u00ea seguiu os passos de Precau\u00e7\u00f5es com o motor de passo.</p> <p>Ap\u00f3s garantir que o Granulado est\u00e1 conectado e que as precau\u00e7\u00f5es de seguran\u00e7a foram tomadas Ative o motor de carga.</p> <p>Nesse momento o motor N\u00e3o deve estar fazendo um ru\u00eddo continuo.</p> <p>Info</p> <p>A velocidade padr\u00e3o do motor durante controle manual \u00e9 de <code>15 RPM</code>.</p>"},{"location":"manual_do_usuario/controle_manual/#pagina-controlar","title":"P\u00e1gina <code>Controlar</code>","text":"<p>Atrav\u00e9s do menu lateral acesse a p\u00e1gina <code>Controlar</code>. Voc\u00ea deve ser recebido com uma tela similar a:</p> <p></p> <p>Conhecendo os componentes:</p>"},{"location":"manual_do_usuario/controle_manual/#componente-comandos","title":"Componente <code>Comandos</code>","text":"<ul> <li><code>Dist\u00e2ncia de Movimento</code>: Modifica a dist\u00e2ncia de movimento. Esse \u00e9 setado ou em <code>mm</code> (Mil\u00edmetros) ou em <code>REV</code> (Revolu\u00e7\u00f5es).</li> </ul> <p>Dica<p>Utilize o <code>REV</code> para encontrar a quantidade de mm por revolu\u00e7\u00e3o necess\u00e1rio para calibra\u00e7\u00e3o do eixo-z.</p> </p> <ul> <li><code>Retornar Eixo-Z</code>: Retorna o eixo-z ao ponto superior.</li> </ul>"},{"location":"manual_do_usuario/controle_manual/#componente-leituras","title":"Componente <code>Leituras</code>","text":"<p>Esse componente apresenta as leituras atuais em tempo real que recebeu do Granulado.</p> <p>Ver Componente <code>Leituras</code></p>"},{"location":"manual_do_usuario/controle_manual/#componente-controle","title":"Componente <code>Controle</code>","text":"<p>Envia o comando para o motor mover em <code>Dist\u00e2ncia de Movimento</code>.</p>"},{"location":"manual_do_usuario/controle_manual/#componente-botao-de-parada","title":"Componente <code>Bot\u00e3o de parada</code>","text":"<p>Esse componente envia um comando de parar o motor imediatamente ao Granulado.</p> <p>Aten\u00e7\u00e3o</p> <p>N\u00e3o deve ser usado como parada de emerg\u00eancia, sempre esteja pronto para acionar o Bot\u00e3o de emerg\u00eancia F\u00cdSICO</p>"},{"location":"manual_do_usuario/inspecionando/","title":"Inspecionando","text":""},{"location":"manual_do_usuario/inspecionando/#inspecionando","title":"Inspecionando","text":"<p>Bem vindo a se\u00e7\u00e3o <code>Inspecionando</code> da documenta\u00e7\u00e3o do Bolinho. Aqui voc\u00ea encontrar\u00e1 uma introdu\u00e7\u00e3o \u00e0 interface do Bolinho assim como as informa\u00e7\u00f5es necess\u00e1rias para inspecionar um experimento j\u00e1 realizado.</p>"},{"location":"manual_do_usuario/inspecionando/#conhecendo-os-componentes","title":"Conhecendo os componentes","text":""},{"location":"manual_do_usuario/inspecionando/#menu","title":"Menu","text":"<p>O menu permite que voc\u00ea navegue pelas diferentes p\u00e1ginas do aplicativo.</p>"},{"location":"manual_do_usuario/inspecionando/#seletor-de-experimentos","title":"Seletor de experimentos","text":"<p>No seletor de experimentos os experimentos s\u00e3o organizados por seus materiais.</p> <p>Voc\u00ea pode utilizar a Barra de pesquisa para filtrar os diferentes materiais.</p> <p>Ao expandir um material todos os experimentos relacionados a ele ser\u00e3o apresentados.</p> <p>Voc\u00ea tambem pode abrir o dialogo de configura\u00e7\u00e3o de seus materiais e experimentos para editar e revisar suas informa\u00e7\u00f5es.</p> <p></p> <p>Info</p> <p>Alguns par\u00e2metros de seus experimentos e materiais n\u00e3o s\u00e3o edit\u00e1veis em fun\u00e7\u00e3o de manter sua integridade de dados.</p>"},{"location":"manual_do_usuario/inspecionando/#inspetor-de-experimento","title":"Inspetor de experimento","text":"<p>O Inspetor de experimento apresenta todos os experimentos selecionados e suas informa\u00e7\u00f5es, aqui voc\u00ea pode encontrar dados sobre o tipo de corpo do experiment, material e mais.</p> <p>Voc\u00ea pode alterar a cor de plot de um experimento aqui: </p>"},{"location":"manual_do_usuario/inspecionando/#plot-de-experimentos","title":"Plot de experimentos","text":"<p>O Plot de experimentos apresenta para voc\u00ea os dados coletados em seu experimento.</p> <p>A barra horizontal encontrada na parte inferior do componente permite que voc\u00ea navegue o experimento e aumente os detalhes em determinado ponto de interesse.</p> <p>\u00c0 direita est\u00e1 localizado a barra de op\u00e7\u00f5es com os seguintes bot\u00f5es:</p> <ul> <li><code>Carga X Tempo</code>: Apresenta o gr\u00e1fico da carga em fun\u00e7\u00e3o do Tempo.</li> <li><code>Carga X Posi\u00e7\u00e3o</code>: Apresenta o gr\u00e1fico da carga em fun\u00e7\u00e3o da Posi\u00e7\u00e3o.</li> <li><code>Zoom autom\u00e1tico</code>: Restitui o zoom para a posi\u00e7\u00e3o inicial, durante um experimento essa fun\u00e7\u00e3o tamb\u00e9m acompanha a cria\u00e7\u00e3o de novos pontos de dado.  </li> </ul> <p>A barra de op\u00e7\u00f5es tamb\u00e9m pode ser minimizada ao apertar a seta indicadora no canto superior direito.</p>"},{"location":"manual_do_usuario/inspecionando/#componente-de-conexao","title":"Componente de conex\u00e3o","text":"<p>O Componente de conex\u00e3o permite que voc\u00ea conecte o Granulado ao Bolinho.</p> <p>O seletor <code>Porta</code> apresentar\u00e1 todas as portas dispon\u00edveis ao Bolinho naquele momento. Caso o dispositivo de interesse n\u00e3o esteja aparecendo voc\u00ea poder pressionar <code>Atualizar</code> para que o Bolinho recupere os dispositivos conectados mais recentes. </p>"},{"location":"manual_do_usuario/inspecionando/#funcionalidades-basicas","title":"Funcionalidades b\u00e1sicas","text":"<p>A maioria dos softwares do bolinho possuem a capacidade de expandir. Para expandir um componente basta pressiona-lo por <code>zoomDelay</code>, por padr\u00e3o esse valor \u00e9 setado em <code>500ms</code>.</p> <p></p>"},{"location":"manual_do_usuario/instalacao/","title":"Instala\u00e7\u00e3o","text":""},{"location":"manual_do_usuario/instalacao/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Este capitulo apresentar\u00e1 as informa\u00e7\u00f5es de como instalar e atualizar o software Bolinho.</p>"},{"location":"manual_do_usuario/instalacao/#estrutura-do-programa","title":"Estrutura do programa","text":"<p>A imagem a seguir apresenta a estrutura de arquivos do programa: </p> <ul> <li><code>src</code>: Cont\u00e9m os arquivos da aplica\u00e7\u00e3o, esse n\u00e3o deve ser alterado diretamente pelo usu\u00e1rio.</li> <li><code>persist</code>: Cont\u00e9m os dados gerados pelo uso<ul> <li><code>configParams.json</code>: Cont\u00e9m os par\u00e2metros de configura\u00e7\u00e3o globais da aplica\u00e7\u00e3o, n\u00e3o \u00e9 recomendado que o usu\u00e1rio os modifique manualmente.</li> <li><code>bolinho.db</code>: \u00c9 o banco de dados da aplica\u00e7\u00e3o, aqui s\u00e3o guardados todos os dados gerados por experimentos, materiais etc. \u00c9 de suma import\u00e2ncia que o usu\u00e1rio mantenha uma c\u00f3pia desse arquivo para proteger contra percas.</li> </ul> </li> <li><code>start.sh</code>: \u00c9 o script de inicializa\u00e7\u00e3o da aplica\u00e7\u00e3o. Esse arquivo deve ser executado para iniciar a aplica\u00e7\u00e3o.</li> <li><code>orange_setup.sh</code>: Baixa todas as depend\u00eancias e realiza o setup da aplica\u00e7\u00e3o. Esse script deve ser executado ao instalar uma vers\u00e3o nova do Bolinho.</li> </ul>"},{"location":"manual_do_usuario/instalacao/#instalando-o-bolinho-pela-primeira-vez","title":"Instalando o Bolinho pela primeira vez","text":"<p>O software Bolinho \u00e9 distribu\u00eddo atrav\u00e9s de um arquivo <code>.zip</code>. Com o seguinte nome <code>Bolinho_[vers\u00e3o].zip</code> por exemplo <code>Bolinho_178.zip</code>.</p> <ol> <li>Extraia o arquivo.</li> <li>Copie o arquivo <code>Bolinho</code> para sua <code>\u00c1rea de trabalho</code>.</li> <li>Execute o script <code>orange_setup.sh</code>.</li> </ol> <p>Com isso seu programa deve estar instalado com todas suas depend\u00eancias.</p>"},{"location":"manual_do_usuario/instalacao/#executando-o-bolinho","title":"Executando o Bolinho","text":"<p>Para utilizar o Bolinho execute o script <code>start.sh</code>.</p> <p>Voc\u00ea deve ser recebido com uma tela como essa:</p> <p></p>"},{"location":"manual_do_usuario/instalacao/#instalando-o-granulado","title":"Instalando o Granulado","text":"<p>O primeiro passo para instalar o granulado \u00e9 ligar seus perif\u00e9ricos de acordo com a seguinte sequ\u00eancia:</p> <p></p> <p>Ap\u00f3s isso conecte o USB e os Sensores de Fim de Curso.</p> <p></p> <p>Aten\u00e7\u00e3o</p> <p>Preste aten\u00e7\u00e3o \u00e0 ordem dos sensores de fim de curso, sendo  * <code>T</code>: Sensor superior. * <code>B</code>: Sensor inferior.</p> <p>A comunica\u00e7\u00e3o do Granulado com o Bolinho \u00e9 feita via USB, portanto conecte-o a uma das portas USB do <code>host</code>.</p>"},{"location":"manual_do_usuario/instalacao/#alimentacao","title":"Alimenta\u00e7\u00e3o","text":"<p>Note que a alimenta\u00e7\u00e3o do granulado \u00e9 realizada atrav\u00e9s de sua porta USB, este tamb\u00e9m realiza a alimenta\u00e7\u00e3o da c\u00e9lula de carga, entretanto o circuito do motor de passo \u00e9 alimentado separadamente. Por tanto \u00e9 poss\u00edvel utilizar o Granulado mesmo sem alimentar o motor.</p>"},{"location":"manual_do_usuario/instalacao/#precaucoes-com-o-motor-de-passo","title":"Precau\u00e7\u00f5es com o motor de passo","text":"<p>PERIGO</p> <p>Antes de Ativar o motor de passo:</p> <ul> <li>Garanta que n\u00e3o h\u00e1 nenhum objeto que possa ser lan\u00e7ado ou impe\u00e7a o deslocamento do motor.</li> <li>Garanta tamb\u00e9m que os Sensores de fim de curso estejam livres de obstru\u00e7\u00f5es.</li> <li>Esteja pronto para acionar o bot\u00e3o de emerg\u00eancia F\u00cdSICO caso o motor inicie um movimento por conta.</li> </ul>"},{"location":"manual_do_usuario/instalacao/#como-atualizar-o-bolinho","title":"Como atualizar o bolinho","text":"<p>Antes de atualizar o Bolinho \u00e9 de suma import\u00e2ncia que seja criado uma C\u00d3PIA do <code>persist</code> para prevenir que a atualiza\u00e7\u00e3o corrompa seus dados.  </p> <p></p> <p>Note que a vers\u00e3o mais nova n\u00e3o possui o diret\u00f3rio <code>persist</code>.</p> <p>Para atualizar o Bolinho basta copiar todos os arquivos da <code>nova</code> vers\u00e3o para os da <code>atual</code>.</p>"},{"location":"manual_do_usuario/novo_experimento/","title":"Novo experimento","text":""},{"location":"manual_do_usuario/novo_experimento/#novo-experimento","title":"Novo experimento","text":"<p>Como criar um novo experimento.</p>"},{"location":"manual_do_usuario/novo_experimento/#criando-um-material-novo","title":"Criando um material novo","text":"<p>Info</p> <p>Esse passo \u00e9 opcional, para caso deseje criar um novo material. Caso queira executar um experimento para um material que j\u00e1 existe pode pular essa parte.</p> <p>Pressione o bot\u00e3o <code>Novo</code> no componente Seletor de experimentos</p> <p></p> <p>Ao pressionar o  voc\u00ea ser\u00e1 apresentado o seguinte prompt de Cria\u00e7\u00e3o de Material</p> <p></p> <p>Preencha com os dados de seu material e pressione <code>Criar</code>.</p>"},{"location":"manual_do_usuario/novo_experimento/#iniciando-experimento","title":"Iniciando experimento","text":"<p>Ao pressionar no <code>Bot\u00e3o de ensaio</code> a p\u00e1gina de Cria\u00e7\u00e3o de experimento aparecer\u00e1. Voc\u00ea deve preenche-la atentamente.</p> <p>Dica</p> <p>Um experimento bem configurado \u00e9 aquele que inicia e finaliza automaticamente sem interven\u00e7\u00e3o do operador, ou seja, aquele que os <code>Limites de parada</code> est\u00e3o bem configurados.</p> <p>Perigo</p> <p>Atente-se ao configurar a <code>Velocidade m\u00e1xima</code>, valores muito altos podem DANIFICAR O EQUIPAMENTO e colocar a seguran\u00e7a do operador em risco.</p>"},{"location":"manual_do_usuario/novo_experimento/#checagem-de-limites","title":"Checagem de limites","text":"<p>Ao finalizar a configura\u00e7\u00e3o de seu experimento algumas checagens ser\u00e3o feitas automaticamente para minimizar erros de opera\u00e7\u00e3o:</p> <ul> <li> <p>Check de carga: O experimento n\u00e3o ser\u00e1 iniciado se a carga atual for maior que <code>10N</code>, isso busca garantir que a c\u00e9lula de carga foi tarada antes de iniciar o experimento.</p> </li> <li> <p>Check de limites globais: O experimento n\u00e3o ser\u00e1 iniciado se qualquer um dos par\u00e2metros do experimento como <code>Limite de carga</code>, <code>Limite de dist\u00e2ncia</code> etc. for maior que o seu respectivo Limite global.</p> </li> </ul>"},{"location":"manual_do_usuario/novo_experimento/#durante-o-experimento","title":"Durante o experimento","text":"<p>Ao iniciar um experimento voc\u00ea ser\u00e1 redirecionado \u00e0 <code>Pagina de experimento</code>. Os dados dessa p\u00e1gina s\u00e3o atualizados \u00e0 uma taxa de aproximadamente <code>2hz</code> para poder alocar mais recursos ao experimento.</p> <p>Nota</p> <p>A taxa de amostragem do experimento \u00e9 bem maior que a de atualiza\u00e7\u00e3o da interface.</p> <p></p> <p>A <code>Pagina de experimento</code> \u00e9 composta por alguns componentes:</p>"},{"location":"manual_do_usuario/novo_experimento/#barra-lateral","title":"Barra lateral","text":"<p>A barra lateral apresenta para o usu\u00e1rio duas informa\u00e7\u00f5es:</p> <ul> <li> <p>Circulo externo: Apresenta a porcentagem daquele valor em rela\u00e7\u00e3o a seu limite, ou seja ao completar significa que esse limite foi atingido e o experimento se encerar\u00e1. </p> </li> <li> <p>Valor interno: Apresenta o valor atual daquele dado. </p> </li> </ul> <p></p>"},{"location":"manual_do_usuario/novo_experimento/#dados-do-experimento","title":"Dados do experimento","text":"<p>No canto inferior s\u00e3o encontrados os diversos dados do experimento atual.</p> <p></p>"},{"location":"manual_do_usuario/novo_experimento/#visor","title":"Visor","text":"<p>O visor apresenta a leitura atual da c\u00e9lula e o <code>Bot\u00e3o de encerrar</code>.</p> <p>Dica</p> <p>Como apresentado em Iniciando experimento, um experimento bem configurado nunca precisar\u00e1 que o operador encerre manualmente. </p> <p></p>"},{"location":"manual_do_usuario/novo_experimento/#plot-em-tempo-real","title":"Plot em tempo real","text":"<p>Por fim temos o Plot em tempo real, ele conta com as mesmas funcionalidades que o Plot de experimentos - Inspecionando.</p> <p></p> <p>Nota</p> <p>Durante um experimento o plot de dados deve ser lido apenas como uma sugest\u00e3o, j\u00e1 que enquanto um experimento est\u00e1 sendo executado a quantidade de pontos apresentados no gr\u00e1fico \u00e9 reduzido para poder alocar mais recursos ao experimento em si.</p>"},{"location":"manual_do_usuario/novo_experimento/#apos-o-experimento","title":"Ap\u00f3s o experimento","text":"<p>Ao finalizar um experimento seus dados ser\u00e3o salvos ao banco de dados automaticamente.</p> <p>Aten\u00e7\u00e3o</p> <p>N\u00c3O encerre o Bolinho durante a escrita ao banco de dados, isso pode corromper seus dados.</p>"}]}